const js = require('@eslint/js')
const tseslint = require('@typescript-eslint/eslint-plugin')
const tsparser = require('@typescript-eslint/parser')
const reactHooks = require('eslint-plugin-react-hooks')

module.exports = [
  js.configs.recommended,
  {
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      parser: tsparser,
      parserOptions: {
        ecmaVersion: 'latest',
        sourceType: 'module',
        ecmaFeatures: {
          jsx: true,
        },
      },
      globals: {
        // Browser globals
        window: 'readonly',
        document: 'readonly',
        console: 'readonly',
        localStorage: 'readonly',
        sessionStorage: 'readonly',
        navigator: 'readonly',
        location: 'readonly',
        history: 'readonly',
        fetch: 'readonly',
        URL: 'readonly',
        URLSearchParams: 'readonly',
        Blob: 'readonly',
        File: 'readonly',
        FormData: 'readonly',
        Headers: 'readonly',
        Request: 'readonly',
        Response: 'readonly',
        setTimeout: 'readonly',
        clearTimeout: 'readonly',
        setInterval: 'readonly',
        clearInterval: 'readonly',
        setImmediate: 'readonly',
        clearImmediate: 'readonly',
        requestAnimationFrame: 'readonly',
        cancelAnimationFrame: 'readonly',
        performance: 'readonly',
        crypto: 'readonly',
        alert: 'readonly',
        confirm: 'readonly',
        prompt: 'readonly',
        // React globals
        React: 'readonly',
        // Node.js globals for build files
        process: 'readonly',
        Buffer: 'readonly',
        global: 'readonly',
        __dirname: 'readonly',
        __filename: 'readonly',
        module: 'readonly',
        require: 'readonly',
        exports: 'readonly',
        // Deno globals for edge functions
        Deno: 'readonly',
        // TypeScript globals
        NodeJS: 'readonly',
        // DOM types
        HTMLElement: 'readonly',
        HTMLDivElement: 'readonly',
        HTMLButtonElement: 'readonly',
        HTMLInputElement: 'readonly',
        HTMLFormElement: 'readonly',
        HTMLAnchorElement: 'readonly',
        HTMLImageElement: 'readonly',
        HTMLVideoElement: 'readonly',
        HTMLAudioElement: 'readonly',
        HTMLCanvasElement: 'readonly',
        HTMLIFrameElement: 'readonly',
        HTMLObjectElement: 'readonly',
        HTMLEmbedElement: 'readonly',
        HTMLSourceElement: 'readonly',
        HTMLTrackElement: 'readonly',
        HTMLMediaElement: 'readonly',
        HTMLCollection: 'readonly',
        NodeList: 'readonly',
        Node: 'readonly',
        Element: 'readonly',
        Event: 'readonly',
        MouseEvent: 'readonly',
        KeyboardEvent: 'readonly',
        TouchEvent: 'readonly',
        WheelEvent: 'readonly',
        FocusEvent: 'readonly',
        InputEvent: 'readonly',
        ClipboardEvent: 'readonly',
        DragEvent: 'readonly',
        ProgressEvent: 'readonly',
        AnimationEvent: 'readonly',
        TransitionEvent: 'readonly',
        UIEvent: 'readonly',
        CustomEvent: 'readonly',
        MessageEvent: 'readonly',
        ErrorEvent: 'readonly',
        CloseEvent: 'readonly',
        // Web APIs
        IntersectionObserver: 'readonly',
        MutationObserver: 'readonly',
        ResizeObserver: 'readonly',
        AbortController: 'readonly',
        AbortSignal: 'readonly',
        BroadcastChannel: 'readonly',
        MessageChannel: 'readonly',
        MessagePort: 'readonly',
        SharedWorker: 'readonly',
        Worker: 'readonly',
        ServiceWorker: 'readonly',
        ServiceWorkerRegistration: 'readonly',
        ServiceWorkerContainer: 'readonly',
        Notification: 'readonly',
        PushManager: 'readonly',
        PushSubscription: 'readonly',
        PushSubscriptionOptions: 'readonly',
        PushEvent: 'readonly',
        SyncEvent: 'readonly',
        ExtendableEvent: 'readonly',
        ExtendableMessageEvent: 'readonly',
        ExtendableEvent: 'readonly',
        ExtendableMessageEvent: 'readonly',
        // Service Worker globals
        self: 'readonly',
        caches: 'readonly',
        // Legacy
        MSApp: 'readonly',
      },
    },
    plugins: {
      '@typescript-eslint': tseslint,
      'react-hooks': reactHooks,
    },
    rules: {
      'react/react-in-jsx-scope': 'off',
      '@typescript-eslint/no-unused-vars': 'warn',
      '@typescript-eslint/no-explicit-any': 'warn',
      'no-undef': 'off', // TypeScript handles this
      'no-unused-vars': 'off', // Use TypeScript version
      'react-hooks/rules-of-hooks': 'error',
      'react-hooks/exhaustive-deps': 'warn',
    },
  },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 'latest',
      sourceType: 'module',
      globals: {
        window: 'readonly',
        document: 'readonly',
        console: 'readonly',
        localStorage: 'readonly',
        sessionStorage: 'readonly',
        navigator: 'readonly',
        location: 'readonly',
        history: 'readonly',
        fetch: 'readonly',
        URL: 'readonly',
        URLSearchParams: 'readonly',
        Blob: 'readonly',
        File: 'readonly',
        FormData: 'readonly',
        Headers: 'readonly',
        Request: 'readonly',
        Response: 'readonly',
        setTimeout: 'readonly',
        clearTimeout: 'readonly',
        setInterval: 'readonly',
        clearInterval: 'readonly',
        setImmediate: 'readonly',
        clearImmediate: 'readonly',
        requestAnimationFrame: 'readonly',
        cancelAnimationFrame: 'readonly',
        performance: 'readonly',
        crypto: 'readonly',
        alert: 'readonly',
        confirm: 'readonly',
        prompt: 'readonly',
        React: 'readonly',
        process: 'readonly',
        Buffer: 'readonly',
        global: 'readonly',
        __dirname: 'readonly',
        __filename: 'readonly',
        module: 'readonly',
        require: 'readonly',
        exports: 'readonly',
        Deno: 'readonly',
        NodeJS: 'readonly',
        HTMLElement: 'readonly',
        HTMLDivElement: 'readonly',
        HTMLButtonElement: 'readonly',
        HTMLInputElement: 'readonly',
        HTMLFormElement: 'readonly',
        HTMLAnchorElement: 'readonly',
        HTMLImageElement: 'readonly',
        HTMLVideoElement: 'readonly',
        HTMLAudioElement: 'readonly',
        HTMLCanvasElement: 'readonly',
        HTMLIFrameElement: 'readonly',
        HTMLObjectElement: 'readonly',
        HTMLEmbedElement: 'readonly',
        HTMLSourceElement: 'readonly',
        HTMLTrackElement: 'readonly',
        HTMLMediaElement: 'readonly',
        HTMLCollection: 'readonly',
        NodeList: 'readonly',
        Node: 'readonly',
        Element: 'readonly',
        Event: 'readonly',
        MouseEvent: 'readonly',
        KeyboardEvent: 'readonly',
        TouchEvent: 'readonly',
        WheelEvent: 'readonly',
        FocusEvent: 'readonly',
        InputEvent: 'readonly',
        ClipboardEvent: 'readonly',
        DragEvent: 'readonly',
        ProgressEvent: 'readonly',
        AnimationEvent: 'readonly',
        TransitionEvent: 'readonly',
        UIEvent: 'readonly',
        CustomEvent: 'readonly',
        MessageEvent: 'readonly',
        ErrorEvent: 'readonly',
        CloseEvent: 'readonly',
        IntersectionObserver: 'readonly',
        MutationObserver: 'readonly',
        ResizeObserver: 'readonly',
        AbortController: 'readonly',
        AbortSignal: 'readonly',
        BroadcastChannel: 'readonly',
        MessageChannel: 'readonly',
        MessagePort: 'readonly',
        SharedWorker: 'readonly',
        Worker: 'readonly',
        ServiceWorker: 'readonly',
        ServiceWorkerRegistration: 'readonly',
        ServiceWorkerContainer: 'readonly',
        Notification: 'readonly',
        PushManager: 'readonly',
        PushSubscription: 'readonly',
        PushSubscriptionOptions: 'readonly',
        PushEvent: 'readonly',
        SyncEvent: 'readonly',
        ExtendableEvent: 'readonly',
        ExtendableMessageEvent: 'readonly',
        // Service Worker globals
        self: 'readonly',
        caches: 'readonly',
        MSApp: 'readonly',
      },
    },
  },
  {
    ignores: [
      'dist/**',
      'node_modules/**',
      '*.config.js',
      '*.config.ts',
      'tailwind.config.js',
      'vite.config.ts',
    ],
  },
]
